"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, <Adrian Estrada> and <Valentina Trevino>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1:ae28294
UT EID 2:vt6738
"""

class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"

class LinkedList:

    def __init__(self):
        """
        Initialize empty LinkedList
        """
        self.head = None

    def insert_term(self, coeff, exp):
        """
        Insert a term into the polynomial in descending order
        """
        if coeff == 0:
            return
        new_node = Node(coeff, exp)
        if self.head is None or self.head.exp < exp:
            new_node.next = self.head
            self.head = new_node
            return
        current = self.head
        while current.next is not None:
            if current.next.exp > exp:
                current = current.next
            else:
                break
        if current.next is not None:
            if current.next.exp == exp:
                current.next.coeff += coeff
                if current.next.coeff == 0: #remove if zero
                    current.next = current.next.next
                return
        new_node.next = current.next
        current.next = new_node
        new_node = Node(coeff, exp)

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        """
        Adds another polynomial to the current polynomial
        Returns a new LinkedList.
        """
        result = LinkedList()
        first_p = self.head
        second_p = p.head

        while first_p is not None or second_p is not None:
            if first_p is None:
                result.insert_term(second_p.coeff, second_p.exp)
                second_p = second_p.next
            elif second_p is None:
                result.insert_term(first_p.coeff, first_p.exp)
                first_p = first_p.next
            elif first_p.exp > second_p.exp:
                result.insert_term(first_p.coeff, first_p.exp)
                first_p = first_p.next
            elif first_p.exp < second_p.exp:
                result.insert_term(second_p.coeff, second_p.exp)
                second_p = second_p.next
                #add
            elif first_p.exp == second_p.exp:
                sum_coeff = first_p.coeff + second_p.coeff
                result.insert_term(sum_coeff, first_p.exp)
                first_p = first_p.next
                second_p = second_p.next

        return result
    def mult(self, p):
        """
        Multiplies the current polynomial by another polynomial 
        Returns a new LinkedList
        """
        result = LinkedList()
        ptr1 = self.head

        while ptr1 is not None:
            ptr2 = p.head
            while ptr2 is not None:
                new_coeff = ptr1.coeff * ptr2.coeff
                new_exp = ptr1.exp + ptr2.exp
                result.insert_term(new_coeff, new_exp)
                ptr2 = ptr2.next
            ptr1 = ptr1.next

        return result

    def __str__(self):
        """
        Returns plynomial as string
        """
        terms = []
        current = self.head
        while current is not None:
            terms.append(f"({current.coeff}, {current.exp})")
            current = current.next
        return " + ".join(terms)

def main():
    # Read first polynomial
    n = int(input())
    p = LinkedList()
    for _ in range(n):
        coeff, exp = map(int, input().split())
        p.insert_term(coeff, exp)

    input()  # skip the blank line

    # Read second polynomial
    m = int(input())
    q = LinkedList()
    for _ in range(m):
        coeff, exp = map(int, input().split())
        q.insert_term(coeff, exp)

    # Add and multiply
    sum_poly = p.add(q)
    prod_poly = p.mult(q)

    print(sum_poly)
    print(prod_poly)


if __name__ == "__main__":
    main()
